@require "./variables.styl"
@require "./z"

// Mixin: Container
//
// Centers the content horizontally and sets a maximum width based on breakpoints. Based on padding.
//
// ex. sm-container($large-padding: 15%, $medium-padding: ($large-padding/2),
//         $small-padding: ($large-padding/3)
//       )
sm-container($large-padding = 15%, $medium-padding = ($large-padding/2),
      $small-padding = ($large-padding/3)
    )
  padding-left: $small-padding
  padding-right: $small-padding

  @media $medium-only
    padding-left: $medium-padding
    padding-right: $medium-padding
  @media $large-and-up
    padding-left: $large-padding
    padding-right: $large-padding

// Mixin: Columns
//
// Creates flexible columns based on a flexbox. All direct children of this element are affected.
// Please note that margin needs to be given as percentage of total width
// Defaults are shown in the example below.
//
// ex. sm-columns($n-large: 3, $n-medium: (ceil($n-large / 2)), $n-small: (ceil($n-large / 4)),
//      $margin-horizontal: 1%, $margin-vertical: 0.5rem,
//      $justify-content: space-around
//    )
sm-columns($n-large = 3, $n-medium = (ceil($n-large / 2)), $n-small = (ceil($n-large / 4)),
      $margin-horizontal = 1%, $margin-vertical = 0.5rem,
      $justify-content = space-around
    )
  display: flex
  flex-wrap: wrap
  justify-content: $justify-content

  > *
    margin-top: $margin-vertical
    @media $small-and-down
     width: (1 / $n-small) * 100% - $margin-horizontal

    @media $medium-only
      width: (1 / $n-medium) * 100% - $margin-horizontal

    @media $large-and-up
      width: (1 / $n-large) * 100% - $margin-horizontal
